{
  "cpp": "/* C++ implementation of QuickSort */\n#include <bits/stdc++.h>\nusing namespace std;\n\n// A utility function to swap two elements\nvoid swap(int* a, int* b)\n{\n\tint t = *a;\n\t*a = *b;\n\t*b = t;\n}\n\n/* This function takes last element as pivot, places\nthe pivot element at its correct position in sorted\narray, and places all smaller (smaller than pivot)\nto left of pivot and all greater elements to right\nof pivot */\nint partition (int arr[], int low, int high)\n{\n\tint pivot = arr[high]; // pivot\n\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\n\n\tfor (int j = low; j <= high - 1; j++)\n\t{\n\t\t// If current element is smaller than the pivot\n\t\tif (arr[j] < pivot)\n\t\t{\n\t\t\ti++; // increment index of smaller element\n\t\t\tswap(&arr[i], &arr[j]);\n\t\t}\n\t}\n\tswap(&arr[i + 1], &arr[high]);\n\treturn (i + 1);\n}\n\n/* The main function that implements QuickSort\narr[] --> Array to be sorted,\nlow --> Starting index,\nhigh --> Ending index */\nvoid quickSort(int arr[], int low, int high)\n{\n\tif (low < high)\n\t{\n\t\t/* pi is partitioning index, arr[p] is now\n\t\tat right place */\n\t\tint pi = partition(arr, low, high);\n\n\t\t// Separately sort elements before\n\t\t// partition and after partition\n\t\tquickSort(arr, low, pi - 1);\n\t\tquickSort(arr, pi + 1, high);\n\t}\n}\n\n/* Function to print an array */\nvoid printArray(int arr[], int size)\n{\n\tint i;\n\tfor (i = 0; i < size; i++)\n\t\tcout << arr[i] << \" \";\n\tcout << endl;\n}\n\n// Driver Code\nint main()\n{\n\tint arr[] = {10, 7, 8, 9, 1, 5};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\tquickSort(arr, 0, n - 1);\n\tcout << \"Sorted array: \\n\";\n\tprintArray(arr, n);\n\treturn 0;\n}\n\n",

  "PseudoCode": "/* low --> Starting index, high --> Ending index */\nquickSort(arr[], low, high)\n{\n if (low < high)\n {\n /* pi is partitioning index, arr[pi] is now\n at right place */\n pi = partition(arr, low, high);\n\n quickSort(arr, low, pi - 1); // Before pi\n quickSort(arr, pi + 1, high); // After pi\n }\n}",
  "PartitionAlgo": "/* low --> Starting index, high --> Ending index */\nquickSort(arr[], low, high)\n{\n if (low < high)\n {\n /* pi is partitioning index, arr[pi] is now\n at right place */\n pi = partition(arr, low, high);\n\n quickSort(arr, low, pi - 1); // Before pi\n quickSort(arr, pi + 1, high); // After pi\n }\n}",
  "PseudoPartition": "/* This function takes last element as pivot, places\n the pivot element at its correct position in sorted\n array, and places all smaller (smaller than pivot)\n to left of pivot and all greater elements to right\n of pivot */\npartition (arr[], low, high)\n{\n // pivot (Element to be placed at right position)\n pivot = arr[high]; \n \n i = (low - 1) // Index of smaller element and indicates the \n // right position of pivot found so far\n\n for (j = low; j <= high- 1; j++)\n {\n // If current element is smaller than the pivot\n if (arr[j] < pivot)\n {\n i++; // increment index of smaller element\n swap arr[i] and arr[j]\n }\n }\n swap arr[i + 1] and arr[high])\n return (i + 1)\n}",
  "IllustrationPartition": "arr[] = {10, 80, 30, 90, 40, 50, 70}\nIndexes: 0 1 2 3 4 5 6 \n\nlow = 0, high = 6, pivot = arr[h] = 70\nInitialize index of smaller element, i = -1\n\nTraverse elements from j = low to high-1\nj = 0 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])\ni = 0 \narr[] = {10, 80, 30, 90, 40, 50, 70} // No change as i and j \n // are same\n\nj = 1 : Since arr[j] > pivot, do nothing\n// No change in i and arr[]\n\nj = 2 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])\ni = 1\narr[] = {10, 30, 80, 90, 40, 50, 70} // We swap 80 and 30 \n\nj = 3 : Since arr[j] > pivot, do nothing\n// No change in i and arr[]\n\nj = 4 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])\ni = 2\narr[] = {10, 30, 40, 90, 80, 50, 70} // 80 and 40 Swapped\nj = 5 : Since arr[j] <= pivot, do i++ and swap arr[i] with arr[j] \ni = 3 \narr[] = {10, 30, 40, 50, 80, 90, 70} // 90 and 50 Swapped \n\nWe come out of loop because j is now equal to high-1.\nFinally we place pivot at correct position by swapping\narr[i+1] and arr[high] (or pivot) \narr[] = {10, 30, 40, 50, 70, 90, 80} // 80 and 70 Swapped \n\nNow 70 is at its correct place. All elements smaller than\n70 are before it and all elements greater than 70 are after\nit."
}
